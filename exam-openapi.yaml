openapi: 3.0.3
info:
  title: Exam API
  description: |
    **Exam** Node.js backend REST API.

    _Generated for interactive testing in Swagger UI._
  version: "1.0.0"
servers:
  - url: http://localhost:5000/api
    description: Local server
tags:
  - name: User
    description: User authentication & management
  - name: TransportService
    description: Transport services CRUD
  - name: Booking
    description: Booking management
  - name: Payment
    description: Payments
  - name: Report
    description: Reports
  - name: Admin
    description: Super admin operations
paths:
  /user:
    get:
      tags: [User]
      summary: Get all users
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of users
    post:
      tags: [User]
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        "201":
          description: User created
  /user/login:
    post:
      tags: [User]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Logged in
  /user/logout:
    get:
      tags: [User]
      summary: Logout user
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Logged out
  /user/{id}:
    get:
      tags: [User]
      summary: Get user by id
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User
    patch:
      tags: [User]
      summary: Update user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        "200":
          description: Updated user
    delete:
      tags: [User]
      summary: Delete user
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "204":
          description: Deleted
  /transport:
    get:
      tags: [TransportService]
      summary: Get all transport services
      responses:
        "200":
          description: List of transport services
    post:
      tags: [TransportService]
      summary: Create transport service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportServiceInput'
      responses:
        "201":
          description: Created transport service
  /transport/{id}:
    get:
      tags: [TransportService]
      summary: Get transport service by id
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "200":
          description: Transport service
    put:
      tags: [TransportService]
      summary: Update transport service
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportServiceInput'
      responses:
        "200":
          description: Updated
    delete:
      tags: [TransportService]
      summary: Delete transport service
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "204":
          description: Deleted
  /booking:
    get:
      tags: [Booking]
      summary: Get all bookings
      responses:
        "200":
          description: Bookings list
    post:
      tags: [Booking]
      summary: Create booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingInput'
      responses:
        "201":
          description: Created booking
  /booking/{id}:
    get:
      tags: [Booking]
      summary: Get booking by id
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "200":
          description: Booking
    put:
      tags: [Booking]
      summary: Update booking
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingInput'
      responses:
        "200":
          description: Updated
    delete:
      tags: [Booking]
      summary: Delete booking
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "204":
          description: Deleted
  /payment:
    get:
      tags: [Payment]
      summary: Get all payments
      responses:
        "200":
          description: Payments list
    post:
      tags: [Payment]
      summary: Create payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInput'
      responses:
        "201":
          description: Created payment
  /payment/{id}:
    get:
      tags: [Payment]
      summary: Get payment by id
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "200":
          description: Payment
    put:
      tags: [Payment]
      summary: Update payment
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInput'
      responses:
        "200":
          description: Updated
    delete:
      tags: [Payment]
      summary: Delete payment
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "204":
          description: Deleted
  /report:
    get:
      tags: [Report]
      summary: Get all reports
      responses:
        "200":
          description: Reports list
    post:
      tags: [Report]
      summary: Create report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportInput'
      responses:
        "201":
          description: Created report
  /report/{id}:
    get:
      tags: [Report]
      summary: Get report by id
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "200":
          description: Report
    put:
      tags: [Report]
      summary: Update report
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportInput'
      responses:
        "200":
          description: Updated
    delete:
      tags: [Report]
      summary: Delete report
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "204":
          description: Deleted
components:
  parameters:
    Id:
      name: id
      in: path
      required: true
      schema:
        type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserInput:
      type: object
      properties:
        full_name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
    TransportServiceInput:
      type: object
      properties:
        vehicle_type:
          type: string
        reg_number:
          type: string
        status:
          type: string
    BookingInput:
      type: object
      properties:
        booking_date:
          type: string
          format: date
        status:
          type: string
        seat_number:
          type: integer
        userId:
          type: integer
        transportServiceId:
          type: integer
    PaymentInput:
      type: object
      properties:
        amount:
          type: number
          format: float
        payment_date:
          type: string
          format: date
        bookingId:
          type: integer
    ReportInput:
      type: object
      properties:
        reportDate:
          type: string
          format: date
        trips_count:
          type: integer
        transportServiceId:
          type: integer
